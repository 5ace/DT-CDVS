#include "defines.h"
#include "FeatureListDB.h"
#include "StringOperator.h"
#include "LookupTable.h"
extern LookupTable lookupTable;

const double FeatureListDB::rdWeight[] = {
    0.90983148, 0.89788882, 0.84031753, 0.70348051, 0.48940959, 0.26548356, 0.09905344, 0.02178987, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.90860374, 0.89928779, 0.84839349, 0.72235936, 0.51533232, 0.29047608, 0.11502915, 0.02850422, 0.00137174, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.90540275, 0.90074256, 0.86325069, 0.75953184, 0.56980418, 0.34509391, 0.15236864, 0.04495558, 0.00533362, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.90040826, 0.89890934, 0.87569051, 0.79754875, 0.63539048, 0.41657861, 0.20770586, 0.07122696, 0.01309711, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.89443977, 0.89428258, 0.88262373, 0.82644116, 0.69290267, 0.48295055, 0.26276449, 0.09831358, 0.02176017, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.88838609, 0.88834996, 0.88425675, 0.84459232, 0.73653076, 0.53924005, 0.31439926, 0.12773999, 0.03299221, 0.00137174, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.88250536, 0.88260784, 0.88212387, 0.85356540, 0.76413581, 0.58318142, 0.36020503, 0.16068142, 0.04797160, 0.00531774, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.87644891, 0.87676031, 0.87770912, 0.85949052, 0.78930454, 0.63359812, 0.41849642, 0.20923744, 0.07190663, 0.01301607, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.86991805, 0.87054113, 0.87203051, 0.86296958, 0.81049226, 0.68140590, 0.47605133, 0.25946662, 0.09721643, 0.02153373, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.86301996, 0.86403083, 0.86631661, 0.86515967, 0.82827669, 0.72249268, 0.52721083, 0.30522839, 0.12194709, 0.03050467, 0.00068590, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.85587031, 0.85729637, 0.86039365, 0.86316008, 0.83564703, 0.74479795, 0.56094302, 0.33938141, 0.14525949, 0.04075981, 0.00311830, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.84850829, 0.85035347, 0.85424451, 0.85869412, 0.83893775, 0.76210454, 0.59605054, 0.38005026, 0.17893068, 0.05730908, 0.00838446, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.84062004, 0.84294350, 0.84773833, 0.85301208, 0.84103086, 0.78048353, 0.63968070, 0.43623778, 0.23055220, 0.08675250, 0.01964650, 0.00137174, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.83236021, 0.83525215, 0.84111715, 0.84754138, 0.84358049, 0.80222270, 0.69175162, 0.50869830, 0.30082803, 0.13229138, 0.03896025, 0.00548697, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.82387497, 0.82742361, 0.83451373, 0.84217409, 0.84389333, 0.82083436, 0.74140903, 0.58801359, 0.38421027, 0.19405429, 0.06755687, 0.01346487, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.81559017, 0.81980431, 0.82811351, 0.83689959, 0.84168211, 0.83269346, 0.77867108, 0.65512708, 0.45884450, 0.25360072, 0.09628467, 0.02229334, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.80680943, 0.81170811, 0.82126543, 0.83115241, 0.83748748, 0.83744066, 0.80018277, 0.69868981, 0.50941181, 0.29573941, 0.11706215, 0.02896039, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.79676416, 0.80241890, 0.81337390, 0.82450876, 0.83207458, 0.83576134, 0.80630662, 0.71552202, 0.53274014, 0.31763861, 0.13071202, 0.03450761, 0.00109742, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.78483504, 0.79139268, 0.80405897, 0.81679709, 0.82580187, 0.83073480, 0.80606050, 0.72282036, 0.55074020, 0.33930968, 0.14973825, 0.04406127, 0.00436253, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.77229780, 0.77979540, 0.79427104, 0.80874746, 0.81922583, 0.82470919, 0.80658711, 0.73642060, 0.58609353, 0.38525074, 0.19269767, 0.06822087, 0.01360350, 0.00091452, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.76037515, 0.76872736, 0.78486482, 0.80096078, 0.81276778, 0.81916896, 0.80942627, 0.75775965, 0.63651438, 0.45251572, 0.25629857, 0.10710734, 0.02942050, 0.00368668, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.74891311, 0.75804429, 0.77569976, 0.79328101, 0.80627473, 0.81373787, 0.81163755, 0.77982471, 0.69022265, 0.53024658, 0.33355641, 0.15972620, 0.05252575, 0.00926615, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.73552256, 0.74560952, 0.76512454, 0.78455311, 0.79898768, 0.80766312, 0.81003212, 0.79269202, 0.72714337, 0.59111478, 0.39830152, 0.20860918, 0.07538704, 0.01584468, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.71854427, 0.72992599, 0.75196166, 0.77394296, 0.79035634, 0.80057158, 0.80553246, 0.79784609, 0.74961827, 0.63502319, 0.45025233, 0.25270166, 0.09918431, 0.02433167, 0.00091452, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.69916534, 0.71199995, 0.73688850, 0.76185072, 0.78063314, 0.79265736, 0.79937485, 0.79679025, 0.75944012, 0.66084546, 0.48767166, 0.28962990, 0.12411504, 0.03520129, 0.00351178, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.68084708, 0.69482969, 0.72202894, 0.74956473, 0.77055255, 0.78436659, 0.79287744, 0.79375969, 0.76652465, 0.68388336, 0.52802731, 0.33356141, 0.15862305, 0.05167740, 0.00854003, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.66626314, 0.68071012, 0.70895752, 0.73794779, 0.76049555, 0.77583491, 0.78597468, 0.78934206, 0.77102810, 0.70445505, 0.56970789, 0.38454024, 0.20354929, 0.07721836, 0.01822614, 0.00137174, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.65501555, 0.66929571, 0.69741668, 0.72677776, 0.75022706, 0.76679185, 0.77834165, 0.78399358, 0.77367973, 0.72455458, 0.61439935, 0.44637002, 0.26297612, 0.11689841, 0.03535099, 0.00548697, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.64376209, 0.65771427, 0.68541880, 0.71488384, 0.73909734, 0.75684040, 0.76972265, 0.77739273, 0.77265809, 0.74044295, 0.65656438, 0.51556583, 0.33622785, 0.17306964, 0.06180012, 0.01338634, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.62808342, 0.64217695, 0.67038173, 0.70087140, 0.72650495, 0.74576413, 0.76007327, 0.76954963, 0.76916769, 0.75244235, 0.69511556, 0.58552471, 0.41659620, 0.24003367, 0.09758617, 0.02604700, 0.00137174, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.60580073, 0.62076508, 0.65090360, 0.68390679, 0.71204654, 0.73342302, 0.74940771, 0.76057270, 0.76377330, 0.75871915, 0.72442080, 0.64421392, 0.49260633, 0.30963919, 0.14187034, 0.04442414, 0.00548697, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.57900052, 0.59525558, 0.62817328, 0.66463155, 0.69598549, 0.71986837, 0.73765181, 0.75038853, 0.75674123, 0.75802014, 0.74070583, 0.68363225, 0.55686161, 0.37693258, 0.19467237, 0.06950344, 0.01340089, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.55360050, 0.57082844, 0.60590818, 0.64520710, 0.67932771, 0.70546074, 0.72489234, 0.73901476, 0.74769648, 0.75134583, 0.74486781, 0.70431207, 0.60288050, 0.43132476, 0.24298426, 0.09392226, 0.02195155, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.53482493, 0.55214049, 0.58762279, 0.62787519, 0.66333111, 0.69086801, 0.71152260, 0.72676008, 0.73703957, 0.74151947, 0.74118839, 0.71216279, 0.63178839, 0.47236132, 0.28409474, 0.11861659, 0.03209080, 0.00137174, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.52400529, 0.54039251, 0.57425021, 0.61324648, 0.64839227, 0.67642265, 0.69793566, 0.71411261, 0.72554826, 0.73100788, 0.73293376, 0.71087742, 0.64366910, 0.49930436, 0.31645793, 0.14493945, 0.04499994, 0.00525836, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.51774422, 0.53256518, 0.56354937, 0.59997975, 0.63390230, 0.66198088, 0.68423345, 0.70132983, 0.71376964, 0.72044033, 0.72267386, 0.70745808, 0.65348037, 0.53227854, 0.35976648, 0.18556032, 0.06610731, 0.01275728, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.51115820, 0.52431382, 0.55223251, 0.58592796, 0.61854200, 0.64669462, 0.66980104, 0.68796600, 0.70147328, 0.70940554, 0.71151414, 0.70282870, 0.66156824, 0.56431279, 0.40286746, 0.22699973, 0.08782589, 0.02063227, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.50097302, 0.51282310, 0.53835089, 0.56998997, 0.60168739, 0.63004553, 0.65402537, 0.67332861, 0.68800678, 0.69726623, 0.70001614, 0.69720122, 0.66663831, 0.58764653, 0.43452620, 0.25713051, 0.10353063, 0.02625254, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.48739174, 0.49835482, 0.52224230, 0.55247484, 0.58350145, 0.61197411, 0.63661361, 0.65691805, 0.67273254, 0.68328305, 0.68707861, 0.68624788, 0.65870640, 0.58507324, 0.43640854, 0.26154595, 0.10689988, 0.02788797, 0.00027437, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.47341218, 0.48364015, 0.50614158, 0.53510534, 0.56535691, 0.59360247, 0.61843428, 0.63927215, 0.65585576, 0.66741896, 0.67229349, 0.67122122, 0.64295204, 0.56873273, 0.42400762, 0.25463785, 0.10595863, 0.02857921, 0.00109748, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.46213353, 0.47139140, 0.49204355, 0.51921337, 0.54826042, 0.57591054, 0.60053831, 0.62141274, 0.63823562, 0.65032870, 0.65610466, 0.65414115, 0.62516240, 0.55085864, 0.41337808, 0.25228902, 0.11122477, 0.03358421, 0.00397474, 0.00034296, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.45490407, 0.46276407, 0.48071710, 0.50519443, 0.53239793, 0.55910126, 0.58329889, 0.60391599, 0.62057626, 0.63273994, 0.63911419, 0.63718362, 0.61048559, 0.54153954, 0.41612304, 0.26513956, 0.12866104, 0.04587033, 0.00963680, 0.00137184, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.45085622, 0.45696859, 0.47145808, 0.49233291, 0.51692923, 0.54226256, 0.56592295, 0.58632721, 0.60284062, 0.61495903, 0.62170684, 0.62032972, 0.59781273, 0.53849516, 0.42945962, 0.29135404, 0.15778733, 0.06599564, 0.01860375, 0.00334188, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.44284335, 0.44846592, 0.46156684, 0.47988359, 0.50179199, 0.52512563, 0.54790629, 0.56809582, 0.58464104, 0.59686138, 0.60393634, 0.60341486, 0.58552050, 0.53676157, 0.44399750, 0.31857549, 0.18707466, 0.08629199, 0.02758414, 0.00543399, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.42798530, 0.43493023, 0.44983930, 0.46779740, 0.48770594, 0.50862916, 0.53001454, 0.54968986, 0.56624287, 0.57869031, 0.58615254, 0.58653438, 0.57282737, 0.53331816, 0.45439732, 0.33958672, 0.21004344, 0.10223531, 0.03476907, 0.00716878, 0.00007621, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.40382748, 0.41420810, 0.43481831, 0.45552644, 0.47501530, 0.49373297, 0.51342066, 0.53212827, 0.54832789, 0.56080752, 0.56854702, 0.56971616, 0.55922959, 0.52628735, 0.45729425, 0.35102793, 0.22597117, 0.11699137, 0.04550036, 0.01325950, 0.00260447, 0.00068590, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.38530786, 0.39732278, 0.42070091, 0.44293701, 0.46226894, 0.47962470, 0.49784005, 0.51536251, 0.53080121, 0.54291730, 0.55063266, 0.55231423, 0.54422938, 0.51645726, 0.45642585, 0.36115380, 0.24655568, 0.14327584, 0.06976692, 0.02986015, 0.01003073, 0.00274362, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.37571725, 0.38680999, 0.40852931, 0.42958351, 0.44808139, 0.46467351, 0.48184683, 0.49829132, 0.51277826, 0.52418208, 0.53153146, 0.53345187, 0.52714265, 0.50407359, 0.45378812, 0.37486370, 0.27904964, 0.18957914, 0.11463416, 0.06164446, 0.02430443, 0.00675075, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.37922786, 0.38642852, 0.40115425, 0.41719327, 0.43310638, 0.44872507, 0.46482220, 0.48014623, 0.49353940, 0.50399877, 0.51074090, 0.51269344, 0.50777553, 0.48942516, 0.44988383, 0.39049628, 0.31711682, 0.24387916, 0.16657213, 0.09787184, 0.04028557, 0.01115912, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.38289404, 0.38695287, 0.39581873, 0.40702727, 0.41976698, 0.43352915, 0.44796857, 0.46182723, 0.47393948, 0.48336075, 0.48944580, 0.49136190, 0.48749491, 0.47316595, 0.44320618, 0.40121162, 0.34744001, 0.28744279, 0.20765806, 0.12567493, 0.05222110, 0.01428991, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.38538191, 0.38745140, 0.39239133, 0.39975694, 0.40925775, 0.42044815, 0.43259934, 0.44456153, 0.45519325, 0.46355024, 0.46898910, 0.47075769, 0.46747647, 0.45591915, 0.43281268, 0.40193886, 0.35945019, 0.30488700, 0.22279340, 0.13414744, 0.05520158, 0.01474005, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.37885492, 0.38127479, 0.38643724, 0.39275867, 0.40016037, 0.40877450, 0.41860451, 0.42866395, 0.43786545, 0.44523805, 0.45004667, 0.45151087, 0.44836275, 0.43833618, 0.41927682, 0.39363982, 0.35521004, 0.30033088, 0.21698221, 0.12776761, 0.05153856, 0.01330364, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.36119667, 0.36612655, 0.37542561, 0.38358623, 0.39043887, 0.39705265, 0.40503336, 0.41350284, 0.42142102, 0.42780415, 0.43184933, 0.43276752, 0.42941811, 0.42014242, 0.40318778, 0.37907901, 0.34046773, 0.28288407, 0.19978139, 0.11411426, 0.04486787, 0.01114196, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.32670421, 0.33742630, 0.35678704, 0.37112109, 0.37965213, 0.38494877, 0.39156119, 0.39868074, 0.40533464, 0.41058897, 0.41368224, 0.41391096, 0.41030332, 0.40150039, 0.38564134, 0.36155912, 0.32173196, 0.26228322, 0.18136613, 0.10109268, 0.03917927, 0.00958018, 0.00011636, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.29133247, 0.30802770, 0.33783343, 0.35879406, 0.36937089, 0.37355320, 0.37883506, 0.38452303, 0.38976530, 0.39373554, 0.39578435, 0.39532760, 0.39151600, 0.38304616, 0.36774974, 0.34339233, 0.30311779, 0.24430317, 0.16943748, 0.09838098, 0.04654827, 0.02033078, 0.00938374, 0.00431955, 0.00137174, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.27102157, 0.29073515, 0.32574920, 0.34981588, 0.36089036, 0.36370947, 0.36738259, 0.37143824, 0.37518072, 0.37787909, 0.37895899, 0.37789697, 0.37387742, 0.36555427, 0.35061230, 0.32644175, 0.28761450, 0.23279560, 0.16909036, 0.11230609, 0.07463044, 0.05044392, 0.03291558, 0.01526906, 0.00480113, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.28140946, 0.29784036, 0.32683074, 0.34621718, 0.35431097, 0.35531495, 0.35714193, 0.35953242, 0.36187592, 0.36345636, 0.36368384, 0.36201137, 0.35760922, 0.34916067, 0.33458599, 0.31158451, 0.27651671, 0.22915368, 0.18188762, 0.14524588, 0.12695786, 0.10377719, 0.07366959, 0.03426093, 0.01068012, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.30764067, 0.31754007, 0.33469109, 0.34530853, 0.34860341, 0.34764133, 0.34766822, 0.34853453, 0.34961586, 0.35015517, 0.34950995, 0.34709310, 0.34211413, 0.33344597, 0.31952096, 0.29865654, 0.26881117, 0.23050308, 0.19892791, 0.17928377, 0.17458136, 0.14938088, 0.10667853, 0.04917722, 0.01510225, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.33479541, 0.33798627, 0.34297002, 0.34453885, 0.34297505, 0.34020170, 0.33865855, 0.33815971, 0.33801490, 0.33745531, 0.33583764, 0.33258866, 0.32703217, 0.31831749, 0.30540807, 0.28721998, 0.26267651, 0.23261170, 0.21138032, 0.20022267, 0.19842269, 0.16883661, 0.11829586, 0.05371347, 0.01615246, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.34800507, 0.34747522, 0.34563810, 0.34184570, 0.33715619, 0.33292609, 0.33008793, 0.32833493, 0.32695064, 0.32523217, 0.32261529, 0.31860830, 0.31268217, 0.30422731, 0.29254445, 0.27690646, 0.25661406, 0.23233863, 0.21363824, 0.19956911, 0.18776918, 0.15223319, 0.10169637, 0.04507000, 0.01318032, 0.00012105, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.35149756, 0.34925411, 0.34424966, 0.33771799, 0.33125051, 0.32592174, 0.32202850, 0.31912817, 0.31655977, 0.31374743, 0.31025435, 0.30569594, 0.29964838, 0.29162122, 0.28104968, 0.26738328, 0.25003790, 0.22934276, 0.20990996, 0.19003630, 0.16708495, 0.12779215, 0.08078584, 0.03541686, 0.01032269, 0.00051371, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.34954604, 0.34668592, 0.34054665, 0.33283095, 0.32544785, 0.31929632, 0.31452453, 0.31060975, 0.30701052, 0.30327872, 0.29909135, 0.29414501, 0.28806059, 0.28037700, 0.27058078, 0.25824688, 0.24294753, 0.22478208, 0.20493703, 0.18172774, 0.15244209, 0.11274249, 0.06937212, 0.03178267, 0.00996787, 0.00136051, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 
    0.34661672, 0.34335558, 0.33648810, 0.32802417, 0.31999061, 0.31312576, 0.30750681, 0.30264860, 0.29814742, 0.29365184, 0.28889996, 0.28362214, 0.27744435, 0.26991469, 0.26058799, 0.24918537, 0.23552121, 0.21970596, 0.20169754, 0.18011004, 0.15168531, 0.11469337, 0.07308419, 0.03666059, 0.01296459, 0.00272097, 0.00007765, 0.00000000, 0.00000000, 0.00000000, 
    0.34334597, 0.33995626, 0.33278679, 0.32391745, 0.31527384, 0.30759128, 0.30099558, 0.29517466, 0.28982884, 0.28465620, 0.27939245, 0.27377051, 0.26742576, 0.25994766, 0.25098121, 0.24037268, 0.22815110, 0.21457796, 0.19940051, 0.18163297, 0.15733089, 0.12450673, 0.08415857, 0.04611772, 0.01827620, 0.00476091, 0.00037169, 0.00000000, 0.00000000, 0.00000000, 
    0.34062520, 0.33731282, 0.33012751, 0.32101768, 0.31165801, 0.30294980, 0.29516944, 0.28827802, 0.28204578, 0.27618999, 0.27041019, 0.26443295, 0.25792282, 0.25052518, 0.24194984, 0.23209608, 0.22109742, 0.20934886, 0.19675253, 0.18267370, 0.16306697, 0.13505508, 0.09737627, 0.05846411, 0.02674291, 0.00889435, 0.00166083, 0.00019598, 0.00000000, 0.00000000, 
    0.33906436, 0.33586537, 0.32869076, 0.31928019, 0.30906763, 0.29918356, 0.29010987, 0.28207967, 0.27492449, 0.26836242, 0.26206691, 0.25575939, 0.24914524, 0.24190347, 0.23375742, 0.22458964, 0.21454134, 0.20406789, 0.19326117, 0.18182545, 0.16639171, 0.14375552, 0.11102713, 0.07368056, 0.03927039, 0.01622429, 0.00450540, 0.00078392, 0.00000000, 0.00000000, 
    0.33836527, 0.33515111, 0.32779656, 0.31790101, 0.30680920, 0.29579622, 0.28553993, 0.27644475, 0.26842056, 0.26117627, 0.25439190, 0.24778535, 0.24109832, 0.23401516, 0.22624737, 0.21764534, 0.20832549, 0.19872649, 0.18906200, 0.17931598, 0.16731834, 0.15050222, 0.12486824, 0.09203253, 0.05643273, 0.02760805, 0.00940063, 0.00199521, 0.00000000, 0.00000000, 
    0.32825734, 0.32653883, 0.32171988, 0.31392736, 0.30348985, 0.29209341, 0.28100360, 0.27110522, 0.26240551, 0.25460315, 0.24740341, 0.24052768, 0.23374394, 0.22674849, 0.21925608, 0.21111659, 0.20242590, 0.19356305, 0.18478748, 0.17629695, 0.16706577, 0.15562880, 0.13718277, 0.10990242, 0.07413495, 0.04012293, 0.01509012, 0.00356541, 0.00003518, 0.00000000, 
    0.29868731, 0.30172419, 0.30522253, 0.30502947, 0.29832904, 0.28791063, 0.27643384, 0.26607069, 0.25692976, 0.24871505, 0.24114810, 0.23397979, 0.22701160, 0.21999757, 0.21269210, 0.20497260, 0.19690905, 0.18879120, 0.18087672, 0.17347351, 0.16635081, 0.15911054, 0.14655264, 0.12453239, 0.08959081, 0.05203643, 0.02124503, 0.00575407, 0.00037834, 0.00006236, 
    0.24914293, 0.26043994, 0.27844477, 0.29173672, 0.29199604, 0.28388381, 0.27229095, 0.26163149, 0.25214449, 0.24358540, 0.23566356, 0.22817101, 0.22095168, 0.21385705, 0.20670831, 0.19940727, 0.19197688, 0.18460546, 0.17753269, 0.17109307, 0.16544210, 0.16069679, 0.15179136, 0.13360970, 0.10065281, 0.06223080, 0.02819297, 0.00928818, 0.00155756, 0.00031179, 
    0.20811037, 0.22623192, 0.25625257, 0.28078895, 0.28690449, 0.28074771, 0.26898696, 0.25796758, 0.24806961, 0.23913674, 0.23084858, 0.22303028, 0.21557098, 0.20841423, 0.20144227, 0.19455028, 0.18769745, 0.18098559, 0.17465239, 0.16902353, 0.16438932, 0.16097337, 0.15438729, 0.13963532, 0.11048506, 0.07395481, 0.03852617, 0.01581700, 0.00427209, 0.00094783, 
    0.20400446, 0.22250112, 0.25322920, 0.27846913, 0.28492202, 0.27867711, 0.26644251, 0.25483049, 0.24436695, 0.23500680, 0.22639899, 0.21834916, 0.21075781, 0.20361314, 0.19683771, 0.19030743, 0.18392760, 0.17774596, 0.17200377, 0.16700882, 0.16305566, 0.16024994, 0.15531828, 0.14418264, 0.12068850, 0.08841687, 0.05284627, 0.02559428, 0.00858582, 0.00200091, 
    0.23810993, 0.25029514, 0.26993484, 0.28476911, 0.28564338, 0.27710841, 0.26415407, 0.25182197, 0.24072672, 0.23093183, 0.22208816, 0.21393785, 0.20634605, 0.19928926, 0.19270386, 0.18645833, 0.18043590, 0.17466596, 0.16938303, 0.16487726, 0.16140907, 0.15901543, 0.15566989, 0.14858379, 0.13167937, 0.10474245, 0.06936989, 0.03712232, 0.01373608, 0.00329764, 
    0.28275465, 0.28685041, 0.29217850, 0.29344875, 0.28697085, 0.27550018, 0.26184711, 0.24885196, 0.23715602, 0.22694199, 0.21791660, 0.20973655, 0.20219076, 0.19522064, 0.18877468, 0.18274151, 0.17700629, 0.17158604, 0.16668155, 0.16256246, 0.15945348, 0.15737720, 0.15537520, 0.15186551, 0.14081161, 0.11875169, 0.08373178, 0.04724795, 0.01828542, 0.00445778, 
    0.31011511, 0.30927624, 0.30572669, 0.29836620, 0.28701333, 0.27356218, 0.25949914, 0.24610817, 0.23395529, 0.22333905, 0.21410009, 0.20585151, 0.19830264, 0.19135991, 0.18498954, 0.17911277, 0.17362262, 0.16851368, 0.16393958, 0.16015001, 0.15735129, 0.15558324, 0.15455269, 0.15352401, 0.14660177, 0.12850725, 0.09478685, 0.05645837, 0.02386224, 0.00708266, 
    0.31906991, 0.31652762, 0.30978122, 0.29908579, 0.28567195, 0.27137653, 0.25726085, 0.24379457, 0.23136814, 0.22036350, 0.21082963, 0.20241705, 0.19477541, 0.18777859, 0.18141929, 0.17565516, 0.17037989, 0.16554773, 0.16126333, 0.15775808, 0.15523293, 0.15373527, 0.15327972, 0.15365401, 0.14947251, 0.13518626, 0.10479029, 0.06777348, 0.03335929, 0.01315350, 
    0.31398861, 0.31232946, 0.30704052, 0.29704100, 0.28363666, 0.26912361, 0.25511208, 0.24177919, 0.22925939, 0.21792748, 0.20806452, 0.19945403, 0.19170486, 0.18462175, 0.17821010, 0.17248405, 0.16736442, 0.16277160, 0.15875793, 0.15551555, 0.15323059, 0.15195080, 0.15183197, 0.15308107, 0.15138028, 0.14215966, 0.11819316, 0.08578966, 0.05041770, 0.02487234, 
    0.29957052, 0.30076063, 0.30056473, 0.29401603, 0.28190298, 0.26722508, 0.25315815, 0.23992789, 0.22741396, 0.21585755, 0.20569928, 0.19692940, 0.18912803, 0.18196588, 0.17542657, 0.16962747, 0.16458832, 0.16022046, 0.15650105, 0.15353337, 0.15146168, 0.15033882, 0.15049756, 0.15258186, 0.15364685, 0.15031555, 0.13414773, 0.10734654, 0.07093960, 0.03889674, 
    0.27219157, 0.27918619, 0.28942670, 0.29023311, 0.28106476, 0.26610921, 0.25155490, 0.23817769, 0.22567788, 0.21402982, 0.20366267, 0.19480917, 0.18704098, 0.17982614, 0.17307721, 0.16707289, 0.16203991, 0.15791682, 0.15456182, 0.15191754, 0.15005467, 0.14903764, 0.14945811, 0.15233843, 0.15606937, 0.15807884, 0.14895003, 0.12691748, 0.08941207, 0.05133650, 
    0.24096198, 0.25479598, 0.27734483, 0.28693947, 0.28130399, 0.26594480, 0.25054754, 0.23679479, 0.22428651, 0.21263516, 0.20209407, 0.19315966, 0.18545077, 0.17820001, 0.17119589, 0.16489891, 0.15982617, 0.15597110, 0.15303580, 0.15074754, 0.14908987, 0.14814224, 0.14878901, 0.15225288, 0.15782842, 0.16300238, 0.15792930, 0.13822712, 0.09985992, 0.05812270, 
    0.21473124, 0.23446764, 0.26763143, 0.28484644, 0.28223415, 0.26642123, 0.25010448, 0.23591932, 0.22340439, 0.21178790, 0.20107197, 0.19201376, 0.18434237, 0.17706742, 0.16982083, 0.16321846, 0.15808966, 0.15449577, 0.15197432, 0.15002320, 0.14854331, 0.14762507, 0.14835252, 0.15192027, 0.15813032, 0.16434677, 0.16096328, 0.14224565, 0.10380181, 0.06066125, 
    0.19443689, 0.21629560, 0.25337880, 0.27371939, 0.27266491, 0.25711411, 0.24078955, 0.22686899, 0.21484282, 0.20366636, 0.19315608, 0.18426527, 0.17686997, 0.16985494, 0.16271818, 0.15613814, 0.15115343, 0.14788338, 0.14575965, 0.14412074, 0.14281182, 0.14192553, 0.14257323, 0.14575254, 0.15148489, 0.15721832, 0.15426817, 0.13664630, 0.10012602, 0.05859849, 
    0.16823210, 0.18847856, 0.22293317, 0.24216648, 0.24169457, 0.22777770, 0.21306263, 0.20065950, 0.19006033, 0.18016468, 0.17072123, 0.16271946, 0.15615488, 0.14995075, 0.14356347, 0.13762383, 0.13318810, 0.13040188, 0.12869426, 0.12737537, 0.12627298, 0.12546704, 0.12587271, 0.12819311, 0.13255276, 0.13701356, 0.13449935, 0.11953568, 0.08805806, 0.05173805, 
    0.12434547, 0.13933117, 0.16484551, 0.17912794, 0.17879345, 0.16846561, 0.15753074, 0.14836767, 0.14056284, 0.13323125, 0.12616710, 0.12017419, 0.11530380, 0.11072382, 0.10598381, 0.10155233, 0.09826380, 0.09624515, 0.09504973, 0.09412507, 0.09332830, 0.09271503, 0.09288181, 0.09423723, 0.09691677, 0.09977825, 0.09795699, 0.08734927, 0.06465764, 0.03813800, 
    0.07314439, 0.08196322, 0.09698020, 0.10539343, 0.10519899, 0.09911786, 0.09268077, 0.08730126, 0.08272186, 0.07840148, 0.07421711, 0.07066503, 0.06779344, 0.06510251, 0.06231163, 0.05969506, 0.05775869, 0.05658365, 0.05590054, 0.05537130, 0.05490610, 0.05453419, 0.05453598, 0.05509053, 0.05629686, 0.05771260, 0.05667466, 0.05074769, 0.03776109, 0.02236997, 
    0.02925776, 0.03278529, 0.03879208, 0.04215737, 0.04207960, 0.03964827, 0.03707676, 0.03493015, 0.03310130, 0.03137011, 0.02968851, 0.02826075, 0.02711021, 0.02603504, 0.02491937, 0.02387182, 0.02309721, 0.02262946, 0.02235994, 0.02215095, 0.02196520, 0.02181325, 0.02178446, 0.02193324, 0.02230396, 0.02279205, 0.02238763, 0.02011186, 0.01502374, 0.00892918, 
    0.00731444, 0.00819632, 0.00969802, 0.01053934, 0.01051990, 0.00991207, 0.00926919, 0.00873254, 0.00827532, 0.00784253, 0.00742213, 0.00706519, 0.00677755, 0.00650877, 0.00622988, 0.00596809, 0.00577467, 0.00565811, 0.00559116, 0.00553916, 0.00549251, 0.00545338, 0.00543408, 0.00544239, 0.00549099, 0.00558452, 0.00548913, 0.00495856, 0.00372664, 0.00222597, 
};

const double FeatureListDB::dWeight[] = {
    0.733219659000435,	0.685273874623729,	0.623450289532798,	0.570100877719377,	0.520082192048951,	0.469438629127039,
    0.421916405002898,	0.378609016728299,	0.339892008160067,	0.303731757106491,	0.272365513841337,	0.246292976720840,
    0.225645235949069,	0.208058636277088,	0.192576511686234,	0.179376276481554,	0.169063171813246,	0.161751148861838,
    0.156390653177196,	0.152682261775614,	0.149882990315581,	0.148596579559529,	0.147791844418729,	0.147847674060132,
    0.149295268875123,	0.168199737187911,	0.180722891566265,	0.142857142857143,	0.166666666666667,	0.000000000000000
};
const double FeatureListDB::rWeight[] = {
    0.910587639311044,	0.910548823948681,	0.909664581523950,	0.902844927478324,	0.892292847666144,	0.887945097598020,
    0.883341339048182,	0.877484042457010,	0.871268313614908,	0.864914817764923,	0.859894731476053,	0.853751129190474,
    0.848333224047575,	0.841182219897306,	0.836702935942338,	0.831096160336175,	0.828752605548897,	0.822931495828888,
    0.816453568977831,	0.806068818902043,	0.800577887766705,	0.797978431218947,	0.794298782322614,	0.785518739815318,
    0.773107058727652,	0.764026259871677,	0.758928724410087,	0.752274092082202,	0.744886840782468,	0.736898432235215,
    0.728301338067005,	0.714605105943368,	0.697417947442135,	0.684103160608224,	0.677086212947333,	0.669959975719868,
    0.661508125763258,	0.648548002629910,	0.633354608792643,	0.613825509819186,	0.597131056086296,	0.585565655059507,
    0.574932202165591,	0.559958709726751,	0.540852669885951,	0.526217239699776,	0.521535926944773,	0.507702575807609,
    0.484839295173207,	0.458623666897718,	0.445325785151723,	0.435066934086839,	0.420782543685838,	0.404824553413025,
    0.386711499413305,	0.372392754683190,	0.359877469250093,	0.347853426440616,	0.334790847495234,	0.319993519719257,
    0.307484457884080,	0.297643253392799,	0.287694581917430,	0.276110447671777,	0.265456643903694,	0.256307603229747,
    0.248408903836758,	0.239208795971149,	0.229962328658710,	0.222854326753986,	0.216847481372358,	0.211651974422588,
    0.205894668754681,	0.200536823490294,	0.195611171037406,	0.190612810534303,	0.186242139713347,	0.181007750896517,
    0.176517106187149,	0.172746391198592,	0.170900861957764,	0.170226512235016,	0.169921831938578,	0.170187787044902
};

const double FeatureListDB::pPos = 0.2623f;
const double FeatureListDB::pNeg = 0.7377f;
const double FeatureListDB::pRonPos[] = {
    0.00187009536928042,    0.00145314299793395,    0.000765206842766753,   0.000417921087105680,   0.000478910876432359,
    0.00072988917704445,    0.000884347321295276,	0.000897553298423175,   0.000920081141759004,	0.00103431099433871,
    0.00124795559070337,	0.00142463639814631,	0.00155538297001903,	0.00169530344196940,	0.00190442582347723,
    0.00211800568465990,	0.00218038265645799,	0.00217576796276974,	0.00215662484466417,	0.00239841074943234,
    0.00276729956011496,	0.00310871290998036,	0.00329552939734780,	0.00334343343202744,	0.00368463408058056,
    0.00408333806651552,	0.00450587384730946,	0.00455288083732424,	0.00457723051363920,	0.00459108384258709,
    0.00490973815203810,	0.00506637879671062,	0.00559973196120457,	0.00578703858637857,	0.00638748514307344,
    0.00653251044651862,	0.00677271496326936,	0.00665014352009486,	0.00654302528965196,	0.00707319718234479,
    0.00786943067305560,	0.00889775828700092,	0.00890688594766285,	0.00866870671732038,	0.00851728187874038,
    0.00892220044214730,	0.00886463236958345,	0.00873010341350533,	0.00893023685259838,	0.0111607892751060,
    0.0129737442864179, 	0.0143372799206398, 	0.0135174643279149, 	0.0129461855946524, 	0.0126758237309730,
    0.0134758950931881, 	0.0145508967733551, 	0.0151225454219433, 	0.0152654807037982, 	0.0159647131482243,
    0.0174305673615380, 	0.0193153784248694, 	0.0199689170786870, 	0.0210550069707422, 	0.0217127811550392,
    0.0239074425430697, 	0.0236223395536607, 	0.0242567443372559, 	0.0235127243947692, 	0.0261287008430188,
    0.0284710139333070, 	0.0308598068842708, 	0.0313212115179139, 	0.0315133825296210, 	0.0348105303065188,
    0.0399233519723725, 	0.0439779198744308, 	0.0442315708132711, 	0.0401597371133852, 	0.0361267630184653,
    0.0280578555060198, 	0.0195367634994246, 	0.00876674352651706,	0.00289435622661371,	0.0000000000000000
};
const double FeatureListDB::pRonNeg[] = {
    0.0000652165281231541,	0.0000507001541767991,	0.0000269881881819557,	0.0000159721989934101,	0.0000205309923725696,
    0.0000327129553720675,	0.0000414791077704659,	0.0000445073552456713,	0.0000482811690732321,	0.0000573724803653890,
    0.0000722148343138200,	0.0000866729095696273,	0.0000987596240042868,	0.000113677519917934,	0.000132004657566141,
    0.000152873946565550,	0.000160011020061886,	0.000166267865441784,	0.000172189698628113,	0.000204935498332884,
    0.000244818371533990,	0.000279515124601311,	0.000303107208781789,	0.000324222830276470,	0.000384055351161304,
    0.000447908018368972,	0.000508325168375918,	0.000532475606212344,	0.000556754136946312,	0.000582169081591800,
    0.000650508284646681,	0.000718614292939370,	0.000862850180004063,	0.000949069837782391,	0.00108190874139919,
    0.00114292037382805,	0.00123081837700750,	0.00127989109449887,	0.00134522832554471,	0.00158042002316348,
    0.00188562598480498,	0.00223655125756890,	0.00233875953650698,	0.00241941207989217,	0.00256798341887365,
    0.00285301639136904,	0.00288831091129156,	0.00300646182932362,	0.00336996976594601,	0.00467902991231830,
    0.00573909717247007,	0.00661189261641657,	0.00660841440158333,	0.00675986618854285,	0.00713956966562102,
    0.00806607873126980,	0.00919213354025493,	0.0100691297743541, 	0.0107724189016543, 	0.0120490025718500,
    0.0139423502592735, 	0.0161876216871750, 	0.0175592995538453, 	0.0196048248879810, 	0.0213381812619421,
    0.0246367310264257, 	0.0253837326761202, 	0.0273992678500649, 	0.0279625218804531, 	0.0323606539217633,
    0.0365185066783190, 	0.0408231933086563, 	0.0429031986232634, 	0.0446187566533329, 	0.0508394831205580,
    0.0602073272719068, 	0.0682448741313576, 	0.0710776551293484, 	0.0665390741525342, 	0.0614436273680424,
    0.0483431331913093, 	0.0338222957001401, 	0.0152098951691093, 	0.00501212071242455,    0.0000000000000000
};
const double FeatureListDB::pDonPos[] = {
    0.00866097566226806,	0.0110834951085352, 	0.0167917277350967, 	0.0251579523764207, 	0.0353041130107872,
    0.0466435287320910, 	0.0582306876938412, 	0.0691797209659809, 	0.0783019407950563, 	0.0856336274947146,
    0.0902767325789442, 	0.0914275160779568, 	0.0870301704428629, 	0.0781987744199564, 	0.0665322638057726,
    0.0542621454707871, 	0.0413195864699818, 	0.0280514365669182, 	0.0161741458192239, 	0.00751638228416553,
    0.00288861236811555,	0.000917711087329939,	0.000315819576685393,	0.0000840758438342087,	0.0000153443951159229,
    0.00000118104785017326,	0.000000276808089884357,0.0000000461346816473929,0.00000000922693632947857
};
const double FeatureListDB::pDonNeg[] = {
    0.00112133800136797,	0.00181132071321140,	0.00360882539684194,	0.00675056524229773,	0.0115923153235747,
    0.0187585040336915, 	0.0283900496211296, 	0.0404019940104532, 	0.0541123710210035, 	0.0698523024206656,
    0.0858196992503091, 	0.0995582960266026, 	0.106275618089360,  	0.105914940261996,  	0.0992613925715247,
    0.0883336190776140, 	0.0722644931936611, 	0.0517285970103707, 	0.0310457347823800, 	0.0148428252108484,
    0.00582996064005491,	0.00187103777595479,	0.000648013813288045,	0.000172434424324484,	0.0000311123327728786,
    0.00000207831433571467,	0.000000446525670864447,0.0000000984983097495103,0.0000000164163849582517
};

FeatureListDB::FeatureListDB(const char* filename){
    numFeatures = 0;
    nDescLength = 0;
    features    = NULL;
    if(filename)    imagefile   = filename;
    else            imagefile   = "";
}

FeatureListDB::FeatureListDB(const FeatureListDB& a) {
    imagefile   = a.imagefile;
    numFeatures = a.numFeatures;
    nDescLength = a.nDescLength;

    if (numFeatures > 0) {
        features = new FeatureDB[numFeatures];
        for (int i=0; i<numFeatures; ++i)
            features[i] = a.features[i];
    } else {
        features = NULL;
    }
}

void FeatureListDB::copyFeatures(const FeatureList& a) {
    numFeatures = a.NumExtracted();
    features = new FeatureDB[numFeatures];
    nDescLength = CDVS_MIN((int)FeatureDB::nQuantElements,(int)a.qdescr_size >> 2);

    for(int j=0; j<numFeatures; ++j) {
        int i;
        features[j].x = (unsigned short) a.features[j].x;
        features[j].y = (unsigned short) a.features[j].y;

        for(i=0; i < nDescLength; ++i) {
            features[j].quantElements[i] = a.features[j].ucdescr[i];
        }
        for(; i<FeatureDB::nQuantElements; ++i) {
            features[j].quantElements[i] = 0;
        }
    }
}

FeatureListDB::~FeatureListDB(void) {
    imagefile = "";
    if(numFeatures>0) {
        delete []features;
        numFeatures = 0;
    }
}

int FeatureListDB::nFeatures() const {
    return numFeatures;
}

int FeatureListDB::matchTwoWay(const FeatureListDB &otherFeatureDBList, float ratioThreshold, PointPairs& pointPair) {
    int nMatched = 0;
    int match_bytes = CDVS_MIN(nDescLength, otherFeatureDBList.nDescLength);

    if(numFeatures > 1 && otherFeatureDBList.numFeatures > 1) {
        ratioThreshold = ratioThreshold*ratioThreshold;
        int distance, minDistance, secondMinDistance;
        int minDistanceInd, secondMinDistanceInd;
        int** distanceMatrix = new int*[numFeatures];
        for (unsigned int i=0; i < numFeatures; i++)
            distanceMatrix[i] = new int[otherFeatureDBList.numFeatures];

        Match match;
        vector<Match> matches1;
        vector<Match> matches1clean;
        vector<Match> matches2;
        vector<Match> matches2clean;

        for(int f = 0; f < numFeatures; ++f) {
            minDistance = 65535;        // max value for unsigned int
            secondMinDistance = 65535;  // 65535;
            minDistanceInd = 0;

            for(int o = 0; o < otherFeatureDBList.numFeatures; ++o) {
                distance =  lookupTable.fHanming[features[f].quantElements[0] ^ otherFeatureDBList.features[o].quantElements[0]];
                switch(match_bytes) {
                case 10:
                    distance += lookupTable.fHanming[features[f].quantElements[9] ^ otherFeatureDBList.features[o].quantElements[9]];
                    distance += lookupTable.fHanming[features[f].quantElements[8] ^ otherFeatureDBList.features[o].quantElements[8]];
                    distance += lookupTable.fHanming[features[f].quantElements[7] ^ otherFeatureDBList.features[o].quantElements[7]];
                    distance += lookupTable.fHanming[features[f].quantElements[6] ^ otherFeatureDBList.features[o].quantElements[6]];
                    distance += lookupTable.fHanming[features[f].quantElements[5] ^ otherFeatureDBList.features[o].quantElements[5]];
                default:
                    distance += lookupTable.fHanming[features[f].quantElements[4] ^ otherFeatureDBList.features[o].quantElements[4]];
                    distance += lookupTable.fHanming[features[f].quantElements[3] ^ otherFeatureDBList.features[o].quantElements[3]];
                    distance += lookupTable.fHanming[features[f].quantElements[2] ^ otherFeatureDBList.features[o].quantElements[2]];
                    distance += lookupTable.fHanming[features[f].quantElements[1] ^ otherFeatureDBList.features[o].quantElements[1]];
                }
                distanceMatrix[f][o] = distance;
                if(distance<minDistance) {
                    secondMinDistance = minDistance;
                    secondMinDistanceInd = minDistanceInd;
                    minDistance = distance;
                    minDistanceInd = o;
                } else {
                    if(distance<secondMinDistance) {
                        secondMinDistance = distance;
                        secondMinDistanceInd = o;
                    }
                }
            }

            if((float)minDistance <= ratioThreshold * (float)secondMinDistance && secondMinDistance>0) {
                match.featureInd = f;
                match.otherFeatureInd = minDistanceInd;
                match.weight = cos(HALF_PI * sqrt((double)minDistance/(double)secondMinDistance));
                matches1.push_back(match);
            }
        }

        if(matches1.size() > 0) {
            std::sort(matches1.begin(), matches1.end(), Match::sortMatchByWeight);
            int lastFeatureIndex = -1;
            for(std::vector<Match>::const_iterator m=matches1.begin(); m<matches1.end(); ++m) {
                if(lastFeatureIndex != m->otherFeatureInd) {
                    lastFeatureIndex = m->otherFeatureInd;
                    Match tempMatch;
                    tempMatch.featureInd = m->featureInd;
                    tempMatch.otherFeatureInd = m->otherFeatureInd;
                    tempMatch.weight = m->weight;
                    matches1clean.push_back(tempMatch);
                }
            }
        }
        matches1.clear();

        for(int o=0; o<otherFeatureDBList.numFeatures; ++o) {
            minDistance = 65535;        // max value for unsigned int
            secondMinDistance = 65535;  // 65535;
            minDistanceInd = 0;

            for(int f=0; f<numFeatures; ++f) {
                distance = distanceMatrix[f][o];
                if(distance<minDistance) {
                    secondMinDistance = minDistance;
                    secondMinDistanceInd = minDistanceInd;
                    minDistance = distance;
                    minDistanceInd = f;
                } else {
                    if(distance<secondMinDistance) {
                        secondMinDistance = distance;
                        secondMinDistanceInd = f;
                    }
                }
            }

            if((float)minDistance <= ratioThreshold * (float)secondMinDistance && secondMinDistance>0) {
                match.featureInd = minDistanceInd;
                match.otherFeatureInd = o;
                match.weight = cos(HALF_PI * sqrt((double)minDistance/(double)secondMinDistance));
                matches2.push_back(match);
            }
        }

        if(matches2.size() > 0) {
            std::sort(matches2.begin(), matches2.end(), Match::sortMatchByWeight);
            int lastFeatureIndex = -1;
            for(std::vector<Match>::const_iterator m=matches2.begin(); m<matches2.end(); ++m) {
                if(lastFeatureIndex != m->featureInd) {
                    lastFeatureIndex = m->featureInd;
                    Match tempMatch;
                    tempMatch.featureInd = m->featureInd;
                    tempMatch.otherFeatureInd = m->otherFeatureInd;
                    tempMatch.weight = m->weight;
                    matches2clean.push_back(tempMatch);
                }
            }
        }
        matches2.clear();

        int flag=0;
        for(vector<Match>::iterator m1 = matches1clean.begin(); m1 < matches1clean.end(); ++m1) {
            flag=0;
            for(vector<Match>::iterator m2 = matches2clean.begin(); m2 < matches2clean.end(); ++m2) {
                if(m1->featureInd == m2->featureInd && m1->otherFeatureInd == m2->otherFeatureInd) {
                    pointPair.x1[nMatched] = features[m1->featureInd].x;
                    pointPair.x2[nMatched] = features[m1->featureInd].y;
                    pointPair.y1[nMatched] = otherFeatureDBList.features[m1->otherFeatureInd].x;
                    pointPair.y2[nMatched] = otherFeatureDBList.features[m1->otherFeatureInd].y;
                    pointPair.weights[nMatched++] = (m1->weight+m2->weight)/2;
                    flag=1;
                }
            }
            if(flag==0){
                pointPair.x1[nMatched] = features[m1->featureInd].x;
                pointPair.x2[nMatched] = features[m1->featureInd].y;
                pointPair.y1[nMatched] = otherFeatureDBList.features[m1->otherFeatureInd].x;
                pointPair.y2[nMatched] = otherFeatureDBList.features[m1->otherFeatureInd].y;
                pointPair.weights[nMatched++] = m1->weight*0.50;
                flag=1;
            }
        }

        for(vector<Match>::iterator m2 = matches2clean.begin(); m2 < matches2clean.end(); ++m2) {
            flag=0;
            for(vector<Match>::iterator m1 = matches1clean.begin(); m1 < matches1clean.end(); ++m1) {
                if(m1->featureInd == m2->featureInd && m1->otherFeatureInd == m2->otherFeatureInd){flag=1;}
            }
            if(flag==0){
                pointPair.x1[nMatched] = features[m2->featureInd].x;
                pointPair.x2[nMatched] = features[m2->featureInd].y;
                pointPair.y1[nMatched] = otherFeatureDBList.features[m2->otherFeatureInd].x;
                pointPair.y2[nMatched] = otherFeatureDBList.features[m2->otherFeatureInd].y;
                pointPair.weights[nMatched++] = m2->weight*0.50;
                flag=1;
            }
        }

        if (distanceMatrix != NULL) {
            for (unsigned int i=0; i<numFeatures; i++)
                if (distanceMatrix[i] != NULL) delete [] distanceMatrix[i];
            delete [] distanceMatrix;
        }
    }
    return nMatched;
}

int FeatureListDB::matchOneWay(const FeatureListDB &otherFeatureDBList, float ratioThreshold, PointPairs& pointPair) {
    int nMatched = 0;
    int match_bytes = CDVS_MIN(nDescLength, otherFeatureDBList.nDescLength);

    if(numFeatures > 1 && otherFeatureDBList.numFeatures > 1) {
        ratioThreshold = ratioThreshold * ratioThreshold;
        int distance, minDistance, secondMinDistance;
        int minDistanceInd, secondMinDistanceInd;

        Match match;
        vector<Match> matches;

        for(int f = 0; f < numFeatures; ++f) {
            minDistance = 65535;        // max value for unsigned int
            secondMinDistance = 65535;  // 65535;
            minDistanceInd = 0;

            for(int o = 0; o < otherFeatureDBList.numFeatures; ++o) {
                distance =  lookupTable.fHanming[features[f].quantElements[0] ^ otherFeatureDBList.features[o].quantElements[0]];
                switch(match_bytes) {
                case 10:
                    distance += lookupTable.fHanming[features[f].quantElements[9] ^ otherFeatureDBList.features[o].quantElements[9]];
                    distance += lookupTable.fHanming[features[f].quantElements[8] ^ otherFeatureDBList.features[o].quantElements[8]];
                    distance += lookupTable.fHanming[features[f].quantElements[7] ^ otherFeatureDBList.features[o].quantElements[7]];
                    distance += lookupTable.fHanming[features[f].quantElements[6] ^ otherFeatureDBList.features[o].quantElements[6]];
                    distance += lookupTable.fHanming[features[f].quantElements[5] ^ otherFeatureDBList.features[o].quantElements[5]];
                default:
                    distance += lookupTable.fHanming[features[f].quantElements[4] ^ otherFeatureDBList.features[o].quantElements[4]];
                    distance += lookupTable.fHanming[features[f].quantElements[3] ^ otherFeatureDBList.features[o].quantElements[3]];
                    distance += lookupTable.fHanming[features[f].quantElements[2] ^ otherFeatureDBList.features[o].quantElements[2]];
                    distance += lookupTable.fHanming[features[f].quantElements[1] ^ otherFeatureDBList.features[o].quantElements[1]];
                }

                if(distance < minDistance) {
                    secondMinDistance = minDistance;
                    secondMinDistanceInd = minDistanceInd;
                    minDistance = distance;
                    minDistanceInd = o;
                } else {
                    if(distance < secondMinDistance) {
                        secondMinDistance = distance;
                        secondMinDistanceInd = o;
                    }
                }
            }

            if((float)minDistance <= ratioThreshold * (float)secondMinDistance && secondMinDistance > 0) {
                int dIdx = (match_bytes == 10) ? minDistance : (minDistance * 2);
                int rIdx = (double)minDistance / (double) secondMinDistance * 100;
                match.featureInd = f;
                match.otherFeatureInd = minDistanceInd;
                match.minDist = (match_bytes == 10) ? minDistance : (minDistance * 2);
                match.disRatio = (double)minDistance / (double) secondMinDistance;
                match.weight = cos(HALF_PI * sqrt((double)minDistance / (double)secondMinDistance));
                //match.weight = double(rWeight[rIdx]);
                //match.weight = double(dWeight[dIdx]);
                //match.weight = rWeight[rIdx] * dWeight[dIdx];
                //match.weight = rWeight[rIdx] + dWeight[dIdx];
                //match.weight = rdWeight[rIdx * 30 + dIdx];
                matches.push_back(match);
            }
        }

        if(matches.size() > 0) {
            sort(matches.begin(), matches.end(), Match::sortMatchByWeight);
            int lastFeatureIndex = -1;

            for(std::vector<Match>::const_iterator m=matches.begin(); m<matches.end(); ++m) {
                if(lastFeatureIndex != m->otherFeatureInd) {
                    lastFeatureIndex = m->otherFeatureInd;
                    pointPair.id1[nMatched] = m->featureInd;
                    pointPair.id2[nMatched] = m->otherFeatureInd;
                    pointPair.x1[nMatched] = features[m->featureInd].x;
                    pointPair.x2[nMatched] = features[m->featureInd].y;
                    pointPair.y1[nMatched] = otherFeatureDBList.features[m->otherFeatureInd].x;
                    pointPair.y2[nMatched] = otherFeatureDBList.features[m->otherFeatureInd].y;
                    pointPair.minDist[nMatched]     = m->minDist;
                    pointPair.distRatio[nMatched]   = m->disRatio;
                    pointPair.weights[nMatched++]   = m->weight;
                }
            }

        }
    }
    return nMatched;
}

double FeatureListDB::expMatch(const FeatureListDB &otherFeatureDBList, PointPairs& pointPair,PointPairs& expPair, int nTest, float threshold) {
    Projective2D pp;
    VectorXi inlierSet;
    pointPair.ransacTransfrom(inlierSet, pp, nTest, threshold);
    Point2DArray thisInlier(pointPair.nInliers, 2), otherInlier(pointPair.nInliers, 2), newInlier(pointPair.nInliers, 2);
    for(int i = 0; i < pointPair.nInliers; ++i) {
        int inlierIndex = pointPair.inlierIndexes[i];
        thisInlier(i, 0) = pointPair.x1[inlierIndex];
        thisInlier(i, 1) = pointPair.x2[inlierIndex];
        otherInlier(i, 0) = pointPair.y1[inlierIndex];
        otherInlier(i, 1) = pointPair.y2[inlierIndex];
    }
    pp.moveByHomography(newInlier, thisInlier);
    for(int i = 0; i < pointPair.nInliers; ++i) {
        cout << otherInlier(i, 0) << " " << otherInlier(i, 1) << " -> " << newInlier(i, 0) << " " << newInlier(i, 1) << endl;
    }
	return 0;
    //Point2DArray thisPoint(numFeatures, 2), otherPoint(numFeatures, 2);
    //for(int i = 0; i < numFeatures; ++i) {
    //    thisPoint(i, 0) = features[i].x;
    //    thisPoint(i, 1) = features[i].y;
    //    //cout << features[i].x << " " << features[i].y << endl;
    //}
    //pp.moveByHomography(otherPoint, thisPoint);
    //int visit[1000] = {0};
    //for(int i = 0; i < pointPair.nInliers; ++i) {
    //    visit[pointPair.id1[pointPair.inlierIndexes[i]]] = 1;
    //}
    //double expWeight = 0;
    //int match_bytes = CDVS_MIN(nDescLength, otherFeatureDBList.nDescLength), count = 0;
    //for(int i = 0; i < numFeatures; ++i) {
    //    if(visit[i])    continue;
    //    int otherIdx = otherFeatureDBList.findFeature(otherPoint(i, 0), otherPoint(i, 1));
    //    if(otherIdx >= 0) {
    //        int distance = lookupTable.fHanming[features[i].quantElements[0] ^ otherFeatureDBList.features[otherIdx].quantElements[0]];
    //        switch(match_bytes) {
    //        case 10:
    //            distance += lookupTable.fHanming[features[i].quantElements[9] ^ otherFeatureDBList.features[otherIdx].quantElements[9]];
    //            distance += lookupTable.fHanming[features[i].quantElements[8] ^ otherFeatureDBList.features[otherIdx].quantElements[8]];
    //            distance += lookupTable.fHanming[features[i].quantElements[7] ^ otherFeatureDBList.features[otherIdx].quantElements[7]];
    //            distance += lookupTable.fHanming[features[i].quantElements[6] ^ otherFeatureDBList.features[otherIdx].quantElements[6]];
    //            distance += lookupTable.fHanming[features[i].quantElements[5] ^ otherFeatureDBList.features[otherIdx].quantElements[5]];
    //        default:
    //            distance += lookupTable.fHanming[features[i].quantElements[4] ^ otherFeatureDBList.features[otherIdx].quantElements[4]];
    //            distance += lookupTable.fHanming[features[i].quantElements[3] ^ otherFeatureDBList.features[otherIdx].quantElements[3]];
    //            distance += lookupTable.fHanming[features[i].quantElements[2] ^ otherFeatureDBList.features[otherIdx].quantElements[2]];
    //            distance += lookupTable.fHanming[features[i].quantElements[1] ^ otherFeatureDBList.features[otherIdx].quantElements[1]];
    //        }
    //        expWeight += match_bytes == 10 ? dWeight[distance] : dWeight[distance * 2];
    //        count += 1;
    //    }
    //}
    //return expWeight;
}

int FeatureListDB::findFeature(float x, float y) const{
    int xx[1000], yy[1000];
    int xLow = 0, xHigh = numFeatures - 1, idx = -1, i, xCenter = int(x / 6) * 6 + 2, yCenter = int(y / 6) * 6 + 2;
    for(i = 0; i < numFeatures; ++i) {
        //cout << features[i].x << " " << features[i].y << endl;
        xx[i] = features[i].x;
        yy[i] = features[i].y;
    }
    for(i = 0; i < numFeatures; ++i) {
        if(features[i].x == xCenter && features[i].y == yCenter) {
            idx = i;
            break;
        }
    }
    return idx;
}

void FeatureListDB::write(FILE* file) const{
#ifdef _WINDOWS_
    char utf8_str[MAX_FILENAME_LENGTH];
    int len = GBKToUTF8(imagefile.c_str(), utf8_str, MAX_FILENAME_LENGTH);
    fwrite(&len, sizeof(int), 1, file);
    fwrite(utf8_str, len*sizeof(char), 1, file);
#else
    int filenameLength = imagefile.size();
    fwrite(&filenameLength, sizeof(int), 1, file);
    fwrite(imagefile.data(), filenameLength*sizeof(char), 1, file);
#endif
    fwrite(&numFeatures, sizeof(numFeatures), 1, file);
    for(int i=0; i<numFeatures; ++i) {
        fwrite(&features[i].x, sizeof(unsigned short), 1, file);
        fwrite(&features[i].y, sizeof(unsigned short), 1, file);
        fwrite(&features[i].quantElements, FeatureDB::nQuantElements * sizeof(unsigned char), 1, file);
    }
}

void FeatureListDB::read(FILE* file) {
    int filenameLength = 0;
    fread(&filenameLength, sizeof(int), 1, file);
    assert(filenameLength>0 && filenameLength<MAX_FILENAME_LENGTH);
#ifdef _WINDOWS_
    char* utf8_str = new char[filenameLength + 1];
    utf8_str[filenameLength] = '\0';
    fread(utf8_str, filenameLength*sizeof(char), 1, file);
    unsigned char gbk_str[MAX_FILENAME_LENGTH];
    UTF8ToGBK((unsigned char*)utf8_str, (unsigned char*)gbk_str, MAX_FILENAME_LENGTH);
    imagefile = std::string((char*)gbk_str);
    delete []utf8_str;
#else
    imagefile.resize(filenameLength);
    fread((void*)imagefile.data(), filenameLength*sizeof(char), 1, file);
#endif
    fread(&numFeatures, sizeof(numFeatures), 1, file);
    features = new FeatureDB[numFeatures];

    for(int i=0; i<numFeatures; ++i) {
        fread(&features[i].x, sizeof(unsigned short), 1, file);
        fread(&features[i].y, sizeof(unsigned short), 1, file);
        fread(&features[i].quantElements, FeatureDB::nQuantElements*sizeof(unsigned char), 1, file);
    }
    nDescLength = FeatureDB::nQuantElements;
}

void FeatureListDB::write(BitOutputStream& writer) const {
#ifdef _WINDOWS_
	char utf8_str[MAX_FILENAME_LENGTH];
	int len = GBKToUTF8(imagefile.c_str(), utf8_str, MAX_FILENAME_LENGTH);
	writer.write((unsigned char*)&len, sizeof(int) * 8);
	writer.write((unsigned char*)utf8_str, len*sizeof(char) * 8);
#else
	int filenameLength = imagefile.size();
	writer.write((unsigned char*)&filenameLength, sizeof(int) * 8);
	writer.write((unsigned char*)imagefile.data(), filenameLength*sizeof(char) * 8);
#endif
	writer.write((unsigned char*)&numFeatures, sizeof(numFeatures) * 8);
	for(int i=0; i<numFeatures; ++i) {
		writer.write((unsigned char*)&features[i].x, sizeof(unsigned short) * 8);
		writer.write((unsigned char*)&features[i].y, sizeof(unsigned short) * 8);
		writer.write((unsigned char*)&features[i].quantElements, FeatureDB::nQuantElements * sizeof(unsigned char) * 8);
	}
}
void FeatureListDB::read(BitInputStream& reader) {
	int filenameLength = 0;
	reader.read((unsigned char*)&filenameLength, sizeof(int) * 8);
	assert(filenameLength>0 && filenameLength<MAX_FILENAME_LENGTH);
#ifdef _WINDOWS_
	char* utf8_str = new char[filenameLength + 1];
	utf8_str[filenameLength] = '\0';
	reader.read((unsigned char*)utf8_str, filenameLength*sizeof(char) * 8);
	unsigned char gbk_str[MAX_FILENAME_LENGTH];
	UTF8ToGBK((unsigned char*)utf8_str, (unsigned char*)gbk_str, MAX_FILENAME_LENGTH);
	imagefile = std::string((char*)gbk_str);
	delete []utf8_str;
#else
	imagefile.resize(filenameLength);
	reader.read((unsigned char*)imagefile.data(), filenameLength*sizeof(char) * 8);
#endif
	reader.read((unsigned char*)&numFeatures, sizeof(numFeatures) * 8);
	features = new FeatureDB[numFeatures];

	for(int i=0; i<numFeatures; ++i) {
		reader.read((unsigned char*)&features[i].x, sizeof(unsigned short) * 8);
		reader.read((unsigned char*)&features[i].y, sizeof(unsigned short) * 8);
		reader.read((unsigned char*)&features[i].quantElements, FeatureDB::nQuantElements*sizeof(unsigned char) * 8);
	}
	nDescLength = FeatureDB::nQuantElements;
}

int FeatureListDB::size() const {
	int size = 0;
	size += sizeof(int);
#ifdef _WINDOWS_
	char utf8_str[MAX_FILENAME_LENGTH];
	int len = GBKToUTF8(imagefile.c_str(), utf8_str, MAX_FILENAME_LENGTH);
	size += sizeof(char) * len;
#else
	size += sizeof(char) * imagefile.size();
#endif
	size += sizeof(numFeatures);
	size += (sizeof(unsigned short) * 2 + FeatureDB::nQuantElements * sizeof(unsigned char)) * numFeatures;
	return size;
}
